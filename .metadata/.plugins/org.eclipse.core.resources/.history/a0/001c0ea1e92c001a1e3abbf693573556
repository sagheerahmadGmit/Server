import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.*;
import java.util.ArrayList;

public class server {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ServerSocket listener;
		int clientid = 0;
		try {
			listener = new ServerSocket(10000, 10);

			while (true) {
				System.out.println("Main thread listening for incoming new connections");
				Socket newconnection = listener.accept();

				System.out.println("New connection received and spanning a thread");
				Connecthandler t = new Connecthandler(newconnection, clientid);
				clientid++;
				t.start();
			}

		}

		catch (IOException e) {
			System.out.println("Socket not opened");
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}

class Connecthandler extends Thread {

	Socket individualconnection;
	int socketid;
	ObjectOutputStream out;
	ObjectInputStream in;
	String message;

	int agentChoice;
	int idCheck;
	ArrayList<Player> players = new ArrayList<>();
	ArrayList<Users> user = new ArrayList<>();

	boolean foundUser = false;
	boolean foundPass = false;

	public Connecthandler(Socket s, int i) {
		individualconnection = s;
		socketid = i;
	}

	void sendMessage(String msg) {
		try {
			out.writeObject(msg);
			out.flush();
			System.out.println("client>" + msg);
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	public void run() {

		try {

			out = new ObjectOutputStream(individualconnection.getOutputStream());
			out.flush();
			in = new ObjectInputStream(individualconnection.getInputStream());
			System.out.println("Connection" + socketid + " from IP address " + individualconnection.getInetAddress());

			// Commence
			do {
				sendMessage("\nPlease Enter 1 if you are an Agent" + "\nEnter 2 if you are a Club\n"
						+ "Press 3 to Exit\n");
				message = (String) in.readObject();

				if (message.equals("1")) {

					do {
						sendMessage("\nPress 1 to Register" + "\nPress 2 to Log-in\n");
						message = (String) in.readObject();

						if (message.equals("1")) {

							Users users = new Users();

							sendMessage("\nThe user would like to Register!!\n");

							sendMessage("Please Enter the Agent Name: ");
							users.setAgentName((String) in.readObject());

							sendMessage("Please Enter the Agent Id: ");
							users.setAgentId((String) in.readObject());

							sendMessage("Please Enter the Agent Email: ");
							users.setEmail((String) in.readObject());

							user.add(users);
						}

						if (message.equals("2")) {

							sendMessage("\nThe user would like to Log-in!!\n");

							sendMessage("Please Enter the Agent Name: ");
							String userName = (String) in.readObject();

							sendMessage("Please Enter the Agent Id: ");
							String password = (String) in.readObject();

							for (Users u : user) {

								if (password.equalsIgnoreCase(u.getAgentId()) && userName.equalsIgnoreCase(u.getAgentName())) {

									System.out.println("user found");
									foundPass = true;
									foundUser = true;

								}

							}

						}
						
						if (foundUser == true && foundPass == true) {
							sendMessage("Login Succesfull!!\n");
						}
						else
						{
							sendMessage("The Login has failed!!\n");
						}

					} while (!message.equals("3"));
					 
				} else {
					sendMessage("\nSelect one of the above options!!!: ");
				}

			} while (!message.equals("3"));
			
			sendMessage("\nServer Client Finished!!\n");

			// } else if (message.equals("2")) {
			//
			// }

			// sendMessage("The app is now finished\n");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		finally {
			try {
				out.close();
				in.close();
				individualconnection.close();
			}

			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

}
